import groovy.json.JsonParserType
import groovy.json.JsonSlurper
import groovy.transform.Field

import java.nio.file.Files
import java.lang.Exception

class BuildToolsConfiguration {
    String maxHeapSize = "1G"
    String java = "java"

     void configure(Closure configureClosure) {
         Closure withNewOwner = configureClosure.rehydrate(this, configureClosure.owner, configureClosure.thisObject)
         withNewOwner.call()
    }
}

@Field BuildToolsConfiguration configuration = new BuildToolsConfiguration()
@Field boolean buildToolsAlreadyDownloaded = false

FileCollection spigot(String rev) {
    return project.files(
        new File(project.buildDir, "buildtools${File.separator}${rev}${File.separator} spigot-" +
                getMinecraftVersionFromJsonFile(new File(buildTools(rev), "BuildData${File.separator}info.json")) +
                ".jar"))
}

FileCollection spigotApi(String rev) {
    return project.files(
        new File(project.buildDir, "buildtools${File.separator}${rev}${File.separator}Spigot${File.separator}" +
                "Spigot-API${File.separator}target${File.separator}spigot-api-" +
                getMinecraftVersionFromJsonFile(new File(buildTools(rev), "BuildData${File.separator}info.json")) +
                "-R0.1-SNAPSHOT.jar")
    )
}

static String getMinecraftVersionFromJsonFile(File file) {
    JsonSlurper jsonSlurper = new JsonSlurper(type: JsonParserType.INDEX_OVERLAY)
    def object = jsonSlurper.parse(file)

    return object.minecraftVersion
}

File buildTools(String rev) {
    def buildToolsDir = new File(project.buildDir, "buildtools")
    def buildToolsJar = new File(buildToolsDir, "buildtools.jar")
    buildToolsDir.mkdirs()

    if (!buildToolsAlreadyDownloaded || !buildToolsJar.exists()) {
        if (buildToolsJar.exists()) buildToolsJar.delete()
        HttpURLConnection connection = new URL("https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar")
                .openConnection() as HttpURLConnection
        connection.doInput = true
        Files.copy(connection.inputStream, buildToolsJar.toPath())
        buildToolsAlreadyDownloaded = true
    }

    def workDir = new File(buildToolsDir, rev)
    workDir.mkdirs()
    def processBuilder = new ProcessBuilder(configuration.java, "-jar", "-Xmx${configuration.maxHeapSize}", buildToolsJar.absolutePath,
            "--rev", rev, "--compile-if-changed")
            .directory(workDir)
            .redirectOutput(new File(buildToolsDir,"BuildTools.log.txt"))
    processBuilder.redirectErrorStream()
    def process = processBuilder.start()
    process.waitFor()
    if (process.exitValue() != 0) {
        throw new Exception("Buildtools exited with ${process.exitValue()}. See logs in ${buildToolsDir.absolutePath}${File.separator}BuildTools.log.txt")
    }
    return workDir
}

dependencies.ext.spigot = this.&spigot
dependencies.ext.spigotApi = this.&spigotApi
project.ext.buildtools = this.configuration.&configure
